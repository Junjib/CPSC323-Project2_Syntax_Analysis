Token: OPERATOR		Lexeme: %%
Token: IDENTIFIER		Lexeme: x
	S --> D
	D --> Ty i Mi;
	Ty --> int
Token: OPERATOR		Lexeme: =
Token: IDENTIFIER		Lexeme: a
	Mi --> , i Mi
Token: OPERATOR		Lexeme: +
Token: IDENTIFIER		Lexeme: b
	Mi --> , i Mi
Token: SEPERATOR		Lexeme: ;
Token: IDENTIFIER		Lexeme: z
	Mi --> e
Token: OPERATOR		Lexeme: =

	S --> A
	A --> i=E;
Token: IDENTIFIER		Lexeme: c
Token: OPERATOR		Lexeme: +
	E --> TE'
	T --> FT'
	F --> n
Token: IDENTIFIER		Lexeme: d
	T' --> epsilon
	E' --> epsilon
Token: SEPERATOR		Lexeme: ;

	S --> A
	A --> i=E;
Token: IDENTIFIER		Lexeme: a
Token: OPERATOR		Lexeme: =
	E --> TE'
	T --> FT'
	F --> n
Token: IDENTIFIER		Lexeme: e
	T' --> epsilon
	E' --> epsilon
Token: OPERATOR		Lexeme: -

	S --> D
	D --> Ty i Mi;
	Ty --> bool
Token: IDENTIFIER		Lexeme: f
Token: SEPERATOR		Lexeme: ;
	Mi --> e
Token: IDENTIFIER		Lexeme: b

	S --> A
	A --> i=E;
Token: OPERATOR		Lexeme: =
Token: IDENTIFIER		Lexeme: g
	C --> true
Token: OPERATOR		Lexeme: *
Token: IDENTIFIER		Lexeme: n

	S --> A
	A --> i=E;
Token: SEPERATOR		Lexeme: ;
	C --> false

	S --> I
	I --> if C then S else S endif
	C --> true

	S --> A
	A --> i=E;
	E --> TE'
	T --> FT'
	F --> i
	T' --> epsilon
	E' --> epsilon


	S --> A
	A --> i=E;
	E --> TE'
	T --> FT'
	F --> i
	T' --> epsilon
	E' --> epsilon


	S --> W
	W --> while C do S whileend
	C --> true

	S --> A
	A --> i=E;
	E --> TE'
	T --> FT'
	F --> i
	T' --> epsilon
	E' --> +TE'
	T --> FT'
	F --> n
	T' --> epsilon
	E' --> epsilon


Finish.